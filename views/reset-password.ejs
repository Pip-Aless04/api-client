<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>POPS Password Reset</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap');

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Poppins', sans-serif;
            background: linear-gradient(135deg, #E8F8F7, #FFF4E8);
            height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .reset-container {
            background-color: white;
            padding: 2rem;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            width: 100%;
            max-width: 400px;
        }

        .logo {
            text-align: center;
            font-size: 3rem;
            font-weight: 700;
            margin-bottom: 1rem;
        }

        .logo span:nth-child(1) { color: #00C4B3; }
        .logo span:nth-child(2) { color: #E31E31; }
        .logo span:nth-child(3) { color: #0091D0; }
        .logo span:nth-child(4) { color: #FF6B00; }

        @keyframes bounce {
            0%, 100% { transform: translateY(0); }
            50% { transform: translateY(-10px); }
        }

        .logo span {
            display: inline-block;
            animation: bounce 2s infinite;
        }

        .logo span:nth-child(2) { animation-delay: 0.1s; }
        .logo span:nth-child(3) { animation-delay: 0.2s; }
        .logo span:nth-child(4) { animation-delay: 0.3s; }

        h2 {
            text-align: center;
            margin-bottom: 1rem;
            color: #333;
        }

        form {
            display: flex;
            flex-direction: column;
        }

        .input-group {
            margin-bottom: 1rem;
        }

        label {
            display: block;
            margin-bottom: 0.5rem;
            color: #555;
        }

        input {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 1rem;
            transition: border-color 0.3s ease;
        }

        input:focus {
            outline: none;
            border-color: #0091D0;
        }

        .code-input {
            display: flex;
            justify-content: space-between;
            gap: 0.5rem;
        }

        .code-input input {
            width: 3rem;
            height: 3rem;
            text-align: center;
            font-size: 1.5rem;
            padding: 0;
        }

        button {
            background: linear-gradient(to right, #00C4B3, #0091D0, #FF6B00);
            color: white;
            padding: 0.75rem;
            border: none;
            border-radius: 4px;
            font-size: 1rem;
            cursor: pointer;
            transition: opacity 0.3s ease;
        }

        button:hover {
            opacity: 0.9;
        }

        .error {
            color: #E31E31;
            margin-bottom: 1rem;
            font-size: 0.9rem;
        }

        .success {
            text-align: center;
            color: #00C4B3;
            margin-bottom: 1rem;
        }

        .login-link {
            text-align: center;
            margin-top: 1rem;
            font-size: 0.9rem;
            color: #555;
        }

        .login-link a {
            color: #0091D0;
            text-decoration: none;
        }

        .login-link a:hover {
            text-decoration: underline;
        }

        .password-input {
            position: relative;
        }

        .toggle-password {
            position: absolute;
            right: 0.75rem;
            top: 50%;
            transform: translateY(-50%);
            background: none;
            border: none;
            cursor: pointer;
            color: #555;
        }

        .custom-alert {
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            padding: 15px 20px;
            border-radius: 5px;
            color: white;
            font-weight: bold;
            text-align: center;
            opacity: 0;
            transition: opacity 0.3s ease;
            z-index: 1000;
        }

        .custom-alert.success {
            background-color: #00C4B3;
        }

        .custom-alert.error {
            background-color: #E31E31;
        }

        .custom-alert.show {
            opacity: 1;
        }


    </style>
</head>
<body>
    <div class="reset-container">
        <div class="logo">
            <span>P</span><span>O</span><span>P</span><span>S</span>
        </div>
        <h2>Reset Your Password</h2>
        <form id="resetForm">
            <div class="input-group">
                <label for="code">C√≥digo de seguridad</label>	
                <div class="code-input">
                    <input type="text" maxlength="1" required>
                    <input type="text" maxlength="1" required>
                    <input type="text" maxlength="1" required>
                    <input type="text" maxlength="1" required>
                    <input type="text" maxlength="1" required>
                    <input type="text" maxlength="1" required>
                </div>
            </div>
            <div class="input-group">
                <label for="password">Nueva contrase√±a</label>
                <div class="password-input">
                    <input type="password" id="password" required>
                    <button type="button" class="toggle-password" aria-label="Toggle password visibility">üëÅÔ∏è</button>
                </div>
            </div>
            <div class="input-group">
                <label for="confirmPassword">Confirmar nueva contrase√±a</label>
                <div class="password-input">
                    <input type="password" id="confirmPassword" required>
                    <button type="button" class="toggle-password" aria-label="Toggle password visibility">üëÅÔ∏è</button>
                </div>
            </div>
            <div class="error" id="errorMessage"></div>
            <button type="submit">Cambiar contrase√±a</button>
        </form>
        <p class="login-link">Recordo su contrase√±a? <a href="#">Iniciar sesi√≥n</a></p>
    </div>

    <div id="customAlert" class="custom-alert"></div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.getElementById('resetForm');
            const codeInputs = document.querySelectorAll('.code-input input');
            const passwordInputs = document.querySelectorAll('input[type="password"]');
            const errorMessage = document.getElementById('errorMessage');
            const toggleButtons = document.querySelectorAll('.toggle-password');

            // Handle code input
            codeInputs.forEach((input, index) => {
                input.addEventListener('input', function() {
                    if (this.value.length === 1) {
                        if (index < codeInputs.length - 1) {
                            codeInputs[index + 1].focus();
                        }
                    }
                });

                input.addEventListener('keydown', function(e) {
                    if (e.key === 'Backspace' && this.value.length === 0 && index > 0) {
                        codeInputs[index - 1].focus();
                    }
                });
            });

            // Toggle password visibility
            toggleButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const input = this.previousElementSibling;
                    const type = input.getAttribute('type') === 'password' ? 'text' : 'password';
                    input.setAttribute('type', type);
                    this.textContent = type === 'password' ? 'üëÅÔ∏è' : 'üîí';
                    this.setAttribute('aria-label', type === 'password' ? 'Show password' : 'Hide password');
                });
            });

            // Form submission
            form.addEventListener('submit', function(e) {
                e.preventDefault();
                errorMessage.textContent = '';

                // Validate security code
                const code = Array.from(codeInputs).map(input => input.value).join('');
                if (code.length !== 6) {
                    showCustomAlert('Please enter the complete security code', 'error');
                    return;
                }

                // Validate password
                if (passwordInputs[0].value.length < 8) {
                    showCustomAlert('Password must be at least 8 characters long', 'error');
                    return;
                }

                if (passwordInputs[0].value !== passwordInputs[1].value) {
                    showCustomAlert('Passwords do not match', 'error');
                    return;
                }

                // Simulate API call
                setTimeout(() => {
                    // Simulating a successful password reset
                    // In a real application, you would make an API call here
                    const success = Math.random() < 0.8; // 80% chance of success for demonstration

                    if (success) {
                        showCustomAlert('Password reset successful! You can now log in with your new password.', 'success');
                        form.reset();
                    } else {
                        showCustomAlert('An error occurred. Please try again later.', 'error');
                    }
                }, 1500); // Simulating network delay
            });

            function showCustomAlert(message, type) {
                const alertElement = document.getElementById('customAlert');
                alertElement.textContent = message;
                alertElement.className = `custom-alert ${type}`;
                setTimeout(() => alertElement.classList.add('show'), 10);
                setTimeout(() => {
                    alertElement.classList.remove('show');
                    setTimeout(() => alertElement.className = 'custom-alert', 300);
                }, 3000);
            }
        });

        const logoSpans = document.querySelectorAll('.logo span');
        logoSpans.forEach(span => {
            span.addEventListener('mouseover', () => {
                span.style.animation = 'none';
                setTimeout(() => {
                    span.style.animation = '';
                }, 10);
            });
        });
    </script>
</body>
</html>